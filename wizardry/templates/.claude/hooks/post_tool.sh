#!/bin/bash
# Hook: Handle agent coordination after tool usage

TOOL_NAME="$1"
TOOL_RESULT="$2"

# Get workflow context
WORKFLOW_FILE=".wizardry/current_workflow.json"
if [[ ! -f "$WORKFLOW_FILE" ]]; then
  exit 0  # Not in a workflow, skip coordination
fi

WORKFLOW_ID=$(cat "$WORKFLOW_FILE" | python3 -c "import json,sys; print(json.load(sys.stdin)['workflow_id'])")
CURRENT_STATUS=$(cat "$WORKFLOW_FILE" | python3 -c "import json,sys; print(json.load(sys.stdin)['status'])")

# Log tool usage
TRANSCRIPT_DIR="/tmp/wizardry-sessions/$WORKFLOW_ID/transcripts"
mkdir -p "$TRANSCRIPT_DIR"
echo "## [$(date -Iseconds)] Tool: $TOOL_NAME" >> "$TRANSCRIPT_DIR/tools.md"
echo "$TOOL_RESULT" >> "$TRANSCRIPT_DIR/tools.md"
echo "" >> "$TRANSCRIPT_DIR/tools.md"

# Detect implementer completion (git commit)
if [[ "$TOOL_NAME" == "Bash" && "$TOOL_RESULT" == *"git commit"* && "$CURRENT_STATUS" == "implementer_phase" ]]; then
  echo "üîÑ Implementer phase complete. Triggering reviewer..."
  
  # Update workflow status
  cat "$WORKFLOW_FILE" | python3 -c "
import json,sys
data = json.load(sys.stdin)
data['status'] = 'reviewer_phase'
json.dump(data, open('$WORKFLOW_FILE', 'w'), indent=2)
"
  
  # Get the latest commit for review
  LATEST_COMMIT=$(git log -1 --format="%H")
  DIFF_OUTPUT=$(git show --name-only "$LATEST_COMMIT")
  
  # Trigger reviewer agent automatically
  cat << EOF

‚úÖ **IMPLEMENTER PHASE COMPLETE**

üîç **REVIEWER PHASE STARTING**

Implementation has been committed. Please review the changes:

Latest commit: $LATEST_COMMIT

$DIFF_OUTPUT

Please analyze this implementation for:
- Code quality and maintainability
- Adherence to existing patterns
- Correctness of the solution
- Any potential improvements

/agents reviewer

EOF

fi

# Detect reviewer completion 
if [[ "$CURRENT_STATUS" == "reviewer_phase" && "$TOOL_RESULT" == *'"approval":'* ]]; then
  APPROVAL=$(echo "$TOOL_RESULT" | python3 -c "
import json,sys,re
try:
  match = re.search(r'\"approval\":\s*(true|false)', sys.stdin.read())
  print(match.group(1) if match else 'false')
except:
  print('false')
")
  
  if [[ "$APPROVAL" == "true" ]]; then
    echo "‚úÖ **REVIEW APPROVED - WORKFLOW COMPLETE**"
    
    # Update workflow status
    cat "$WORKFLOW_FILE" | python3 -c "
import json,sys
data = json.load(sys.stdin)
data['status'] = 'completed'
json.dump(data, open('$WORKFLOW_FILE', 'w'), indent=2)
"
    
    # Create PR
    TASK=$(cat "$WORKFLOW_FILE" | python3 -c "import json,sys; print(json.load(sys.stdin)['task'])")
    TARGET_BRANCH=$(cat "$WORKFLOW_FILE" | python3 -c "import json,sys; print(json.load(sys.stdin)['branch'])")
    CURRENT_BRANCH=$(git branch --show-current)
    
    echo "üöÄ Creating pull request from $CURRENT_BRANCH to $TARGET_BRANCH..."
    
    # Create PR from workflow branch to target branch  
    gh pr create --base "$TARGET_BRANCH" --head "$CURRENT_BRANCH" --title "ü§ñ $TASK" --body "$(cat <<EOF
## Automated Workflow Implementation

**Task**: $TASK
**Workflow ID**: $WORKFLOW_ID  
**Target Branch**: $TARGET_BRANCH
**Implementation Branch**: $CURRENT_BRANCH

## Implementation Summary
This PR was created by the Wizardry multi-agent workflow system.

### Agents Involved
- **Implementer**: Analyzed task and implemented solution
- **Reviewer**: Reviewed code quality and approved changes

### Workflow Transcripts
Full conversation logs are available at: \`/tmp/wizardry-sessions/$WORKFLOW_ID/transcripts/\`

---
ü§ñ Generated by Wizardry Agent Orchestrator
EOF
)" 2>/dev/null && echo "‚úÖ Pull request created successfully!" || echo "‚ùå Failed to create PR - please create manually"

  else
    echo "‚ùå **REVIEW REJECTED - ITERATION NEEDED**"
    
    # Check iteration count
    ITERATION_COUNT=$(cat "$WORKFLOW_FILE" | python3 -c "
import json,sys
data = json.load(sys.stdin)
count = data.get('iteration_count', 0) + 1
data['iteration_count'] = count
data['status'] = 'implementer_phase' if count <= 2 else 'failed'
json.dump(data, open('$WORKFLOW_FILE', 'w'), indent=2)
print(count)
")
    
    if [[ "$ITERATION_COUNT" -le "2" ]]; then
      echo "üîÑ Iteration $ITERATION_COUNT/2 - Implementer will address feedback..."
    else
      echo "üõë Max iterations reached. Workflow failed."
    fi
  fi
fi