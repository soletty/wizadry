  // Parse test scenarios from the content more flexibly
  const parseTestPlan = (content: string) => {
    const lines = content.split('\n')
    const scenarios: Array<{
      title: string
      objective: string
      steps: string[]
      expectedOutcome: string
      edgeCases: string[]
    }> = []
    
    let currentScenario: any = null
    let currentSection = ''
    
    for (const line of lines) {
      const trimmedLine = line.trim()
      
      // Skip JSON blocks and empty lines
      if (trimmedLine.startsWith('{') || trimmedLine.startsWith('}') || trimmedLine.startsWith('"') || \!trimmedLine) {
        continue
      }
      
      // Detect scenario headers - handle both "### Scenario X:" and "Scenario X:" formats
      if (trimmedLine.match(/^#{0,3}\s*Scenario \d+:|^### Scenario \d+:/)) {
        if (currentScenario) scenarios.push(currentScenario)
        currentScenario = {
          title: trimmedLine.replace(/^#{0,3}\s*Scenario \d+:\s*/, ''),
          objective: '',
          steps: [],
          expectedOutcome: '',
          edgeCases: []
        }
        currentSection = 'title'
      }
      // Detect sections with flexible matching
      else if (trimmedLine.match(/^\*\*Objective\*\*:|^Objective:/)) {
        currentSection = 'objective'
        const objectiveText = trimmedLine.replace(/^\*\*Objective\*\*:\s*|^Objective:\s*/, '').trim()
        if (currentScenario && objectiveText) currentScenario.objective = objectiveText
      }
      else if (trimmedLine.match(/^\*\*Steps\*\*:|^Steps:/)) {
        currentSection = 'steps'
      }
      else if (trimmedLine.match(/^\*\*Expected Outcome\*\*:|^Expected Outcome:/)) {
        currentSection = 'expected'
        const outcomeText = trimmedLine.replace(/^\*\*Expected Outcome\*\*:\s*|^Expected Outcome:\s*/, '').trim()
        if (currentScenario && outcomeText) currentScenario.expectedOutcome = outcomeText
      }
      else if (trimmedLine.match(/^\*\*Edge Cases.*\*\*:|^Edge Cases.*:/)) {
        currentSection = 'edges'
      }
      // Process content based on current section
      else if (currentScenario && trimmedLine) {
        if (currentSection === 'objective' && \!currentScenario.objective) {
          currentScenario.objective = trimmedLine
        }
        else if (currentSection === 'steps' && (trimmedLine.match(/^\d+\./) || trimmedLine.startsWith('-'))) {
          const step = trimmedLine.replace(/^\d+\.\s*/, '').replace(/^-\s*/, '')
          if (step) currentScenario.steps.push(step)
        }
        else if (currentSection === 'expected' && \!currentScenario.expectedOutcome) {
          currentScenario.expectedOutcome = trimmedLine
        }
        else if (currentSection === 'edges' && trimmedLine.startsWith('-')) {
          const edge = trimmedLine.replace(/^-\s*/, '')
          if (edge) currentScenario.edgeCases.push(edge)
        }
      }
    }
    
    if (currentScenario) scenarios.push(currentScenario)
    return scenarios
  }

  const scenarios = parseTestPlan(testPlan.test_plan_content)

  // If no scenarios found, create a simple markdown renderer for the content
  const renderSimpleContent = (content: string) => {
    const lines = content.split('\n')
    const elements: JSX.Element[] = []
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim()
      
      // Skip JSON blocks
      if (line.startsWith('{') || line.startsWith('}') || line.startsWith('"') || line.startsWith('```')) {
        continue
      }
      
      // Headers
      if (line.startsWith('### ')) {
        elements.push(<h3 key={i} className="text-lg font-semibold mt-6 mb-3 text-gray-800">{line.slice(4)}</h3>)
      } else if (line.startsWith('## ')) {
        elements.push(<h2 key={i} className="text-xl font-bold mt-8 mb-4 text-gray-900">{line.slice(3)}</h2>)
      } else if (line.startsWith('# ')) {
        elements.push(<h1 key={i} className="text-2xl font-bold mt-8 mb-4 text-gray-900">{line.slice(2)}</h1>)
      }
      // List items with checkboxes
      else if (line.match(/^- \[.\]/) || line.match(/^\d+\./)) {
        const text = line.replace(/^- \[.\]\s*/, '').replace(/^\d+\.\s*/, '')
        elements.push(
          <div key={i} className="flex items-start space-x-2 mb-2">
            <input type="checkbox" className="mt-1 h-3 w-3 text-green-600 border-gray-300 rounded focus:ring-green-500" />
            <span className="text-sm text-gray-700">{text}</span>
          </div>
        )
      }
      else if (line.startsWith('- ')) {
        elements.push(
          <div key={i} className="flex items-start space-x-2 mb-1">
            <span className="text-gray-400 mt-1">â€¢</span>
            <span className="text-sm text-gray-700">{line.slice(2)}</span>
          </div>
        )
      }
      // Regular paragraphs
      else if (line.length > 0) {
        elements.push(<p key={i} className="mb-3 text-gray-700 leading-relaxed">{line}</p>)
      }
    }
    
    return elements
  }
EOF < /dev/null